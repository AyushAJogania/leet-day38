class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int n = s.length();
        vector<int> lps(n, 0);  // Longest proper prefix which is also a suffix
        
        int len = 0;  // Length of the current prefix
        int i = 1;
        
        while (i < n) {
            if (s[i] == s[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        
        int longestSub = lps[n - 1];
        int repeatedLen = n - longestSub;
        
        // Check if the original string can be formed using repeated substring
        return (longestSub > 0 && n % repeatedLen == 0);
    }
};
